# ----实现visual studio的目录分组（过滤器）功能
macro( source_group_by_dir source_files )
    if(MSVC)
        set(sgbd_cur_dir ${CMAKE_CURRENT_SOURCE_DIR})
        foreach(sgbd_file ${${source_files}})
            string(REGEX REPLACE ${sgbd_cur_dir}//(.*/) //1 sgbd_fpath ${sgbd_file})
            string(REGEX REPLACE "/(.*/)/.*" //1 sgbd_group_name ${sgbd_fpath})
            string(COMPARE EQUAL ${sgbd_fpath} ${sgbd_group_name} sgbd_nogroup)
            string(REPLACE "/" "//" sgbd_group_name ${sgbd_group_name})
            if(sgbd_nogroup)
                set(sgbd_group_name "//")
            endif(sgbd_nogroup)
            source_group(${sgbd_group_name} FILES ${sgbd_file})
        endforeach(sgbd_file)
    endif(MSVC)
endmacro( source_group_by_dir )

# ----多目录头文件包含路径处理
macro( add_include_path include_files )
    #提取目录
    foreach(file_name ${${include_files}})
        string(REGEX REPLACE \(.*\)/.*$ \\1 path_name ${file_name})
        list(APPEND paths ${path_name})
    endforeach(file_name)
    #去重
    list(LENGTH paths paths_len)
    if(paths_len GREATER 1)
        list(REMOVE_DUPLICATES paths)
    endif(paths_len)
    #添加
    foreach(path_name ${path})
        include_directories(${path_name})
    endforeach(path_name)
endmacro( add_include_path )

# ----获取 vs 版本
macro( my_get_vs_version version_result )
    if(MSVC)
        if(MSVC_VERSION EQUAL 1600)
            set(${version_result} "vs2010")
        elseif(MSVC_VERSION EQUAL 1700)
            set(${version_result} "vs2012")
        elseif(MSVC_VERSION EQUAL 1800)
            set(${version_result} "vs2013")
        elseif(MSVC_VERSION EQUAL 1900)
            set(${version_result} "vs2015")
        endif(MSVC_VERSION)
    endif(MSVC)
endmacro( my_get_vs_version )

# ----从目录中收集文件
macro( collect_sources dir ret )
    #aux_source_directory(. _tmp_list)
    file(GLOB _tmp_list ${dir}/*.cpp ${dir}/*.cc ${dir}/*.c)
    foreach(f ${_tmp_list})
        list(APPEND ${ret} ${f})
    endforeach(f)
    #去重
    list(LENGTH ${ret} ret_len)
    if(ret_len GREATER 1)
        list(REMOVE_DUPLICATES ${ret})
    endif(ret_len)
endmacro( collect_sources )

# ----从目录中收集文件(c only)
macro( collect_c dir ret )
    #aux_source_directory(. _tmp_list)
    file(GLOB _tmp_list ${dir}/*.c)
    foreach(f ${_tmp_list})
        list(APPEND ${ret} ${f})
    endforeach(f)
    #去重
    list(LENGTH ${ret} ret_len)
    if(ret_len GREATER 1)
        list(REMOVE_DUPLICATES ${ret})
    endif(ret_len)
endmacro( collect_c )

# ----从目录中收集文件(cpp and cc)
macro( collect_cpp dir ret )
    #aux_source_directory(. _tmp_list)
    file(GLOB _tmp_list ${dir}/*.cpp ${dir}/*.cc)
    foreach(f ${_tmp_list})
        list(APPEND ${ret} ${f})
    endforeach(f)
    #去重
    list(LENGTH ${ret} ret_len)
    if(ret_len GREATER 1)
        list(REMOVE_DUPLICATES ${ret})
    endif(ret_len)
endmacro( collect_cpp )

# ----从列表中排除文件
macro( exclude_file_from sources excludes ret )
    set(_tmp_list)
    foreach(path ${${sources}})
        string(REGEX REPLACE ".+/(.+)\\.*" "\\1" file_name ${path})
        list(FIND ${excludes} ${file_name} retvar)
        if(${retvar} EQUAL -1)
            list(APPEND _tmp_list ${path})
        else()
            message( STATUS "excluded = ${path}")
        endif(retvar)
        set(${ret} ${_tmp_list})
    endforeach(path)
endmacro( exclude_file_from )

